#!/bin/bash

# Description: Configure Docker Environment for Build
# Author: Weslley Andrade
# ASCII Art from https://patorjk.com/software/taag/#p=display&f=Standard

# System constants
readonly C_RESET='\033[0m'
readonly C_RED='\033[31m'
readonly C_GREEN='\033[32m'
readonly C_YELLOW="\033[33m"
readonly C_LIGHT_BLUE="\033[38;5;75m"
readonly L_CLEAR="\033[K"
readonly BOLD='\033[1m'
readonly BAR="————————————————————————————————————————————————————————————————————————————————"

## Functions

function display_header() {
    clear

    echo -e "${BOLD}"
    echo "#------------------------------------------------------------------------------------#"
    echo "#    ____             _                ____             __ _                         #"
    echo "#   |  _ \  ___   ___| | _____ _ __   / ___|___  _ __  / _(_) __ _ _   _ _ __ ___    #"
    echo "#   | | | |/ _ \ / __| |/ / _ \ '__| | |   / _ \| '_ \| |_| |/ _\` | | | | '__/ _ \   #"
    echo "#   | |_| | (_) | (__|   <  __/ |    | |__| (_) | | | |  _| | (_| | |_| | | |  __/   #"
    echo "#   |____/ \___/ \___|_|\_\___|_|     \____\___/|_| |_|_| |_|\__, |\__,_|_|  \___|   #"
    echo "#                                                            |___/                   #"
    echo "#------------------------------------------------------------------------------------#"
    echo -e "${C_RESET}"
}

function help() {
    set_defaults

    echo -e "\nUsage: ${C_YELLOW}$0 --app-name=${C_LIGHT_BLUE}\"APP-NAME\"${C_YELLOW} --app-port=${C_LIGHT_BLUE}8000${C_YELLOW} --db-port=${C_LIGHT_BLUE}3306${C_YELLOW} --php-version=${C_LIGHT_BLUE}\"8.2\"${C_RESET}\n"
    echo -e "Explanation: "
    echo -e "  --app-name      The application name Docker will use to create a container. The default is the ${BOLD}$APP_NAME${C_RESET}."
    echo -e "  --app-port      The port that should be exposed for accessing the application. The default is ${BOLD}$APP_PORT${C_RESET}."
    echo -e "  --db-port       The port that should be exposed for accessing the database. The default is ${BOLD}$DB_PORT${C_RESET}."
    echo -e "  --php-version   The version of PHP to be installed in the container. The default is ${BOLD}8.2${C_RESET}."

    end_script
}

function end_script() {
    echo
    echo "${BAR}"
    read -p "Press any key to exit"
    exit
}

function environment_setup() {
    if [ -f .env ]; then
        source .env
        if [ "$(docker ps -a | grep ${APP_NAME}-app)" ]; then
            docker-compose -p ${APP_NAME} down
        fi
    fi
}

function is_port_available() {
    local port=$1

    # Check if the port is available using lsof
    if lsof -i:$port &>/dev/null; then
        return 1 # Port is in use by a local process
    fi

    # Check if the port is used by any Docker container (running or stopped)
    if docker ps -aq | xargs docker inspect --format='{{range $p, $conf := .HostConfig.PortBindings}}{{if $conf}}{{(index $conf 0).HostPort}}{{end}}{{end}}' | grep -q "^$port$"; then
        return 1 # Port is used by a Docker container
    fi

    return 0 # Port is available
}

function find_available_port() {
    local port=$1

    while ! is_port_available $port; do
        port=$((port + 1))
    done

    echo $port
}

function prompt_for_input() {
    echo "Please provide the following details:"

    read -p "App Name (default: $APP_NAME): " input_app_name
    [ ! -z "$input_app_name" ] && APP_NAME=$input_app_name

    read -p "App Port (default: $APP_PORT): " input_app_port
    [ ! -z "$input_app_port" ] && APP_PORT=$input_app_port

    read -p "Database Port (default: $DB_PORT): " input_db_port
    [ ! -z "$input_db_port" ] && DB_PORT=$input_db_port

    read -p "PHP Version (default: 8.2): " input_php_version
    [ ! -z "$input_php_version" ] && PHP_VERSION=$input_php_version
}

function parse_arguments() {
    # @todo: If no arguments were provided, prompt the user for input
    # if [ $# -eq 0 ]; then
    #     prompt_for_input
    #     return
    # fi

    # Parse the command-line arguments
    for arg in "$@"; do
        case $arg in
        --app-name=*)
            APP_NAME="${arg#*=}"
            shift
            ;;
        --app-port=*)
            APP_PORT="${arg#*=}"
            shift
            ;;
        --db-port=*)
            DB_PORT="${arg#*=}"
            shift
            ;;
        --php-version=*)
            PHP_VERSION="${arg#*=}"
            shift
            ;;
        --help=*)
            help
            ;;
        *)
            # Unknown option
            help
            ;;
        esac
    done

    # Check if APP_NAME is provided
    if [ -z "$APP_NAME" ]; then
        echo -e "\n${C_RED}Error: App name not provided.${C_RESET}"

        help
    fi
}

function set_defaults() {
    # If APP_NAME is not set, default to the current repository name or prompt
    if [ -z "$APP_NAME" ]; then
        if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
            APP_NAME=$(basename $(git rev-parse --show-toplevel))
        else
            echo -e "\n${C_RED}Error: App name not provided.${C_RESET}"
            help
        fi
    fi

    # Set default app port if not set
    [ -z "$APP_PORT" ] && APP_PORT=$(find_available_port 8000)

    # Set default db port if not set
    [ -z "$DB_PORT" ] && DB_PORT=$(find_available_port 3306)

    [ -z "$PHP_VERSION" ] && PHP_VERSION="8.2"
}

function test_ports() {
    if ! is_port_available $APP_PORT; then
        echo "Port $APP_PORT not available. Use another port."
        end_script
    fi

    if ! is_port_available $DB_PORT; then
        echo "Port $DB_PORT not available. Use another port."
        end_script
    fi
}

function create_env_file() {
    rm -f .env
    echo "export APP_NAME=${APP_NAME}" >>.env
    echo "export APP_PORT=${APP_PORT}" >>.env
    echo "export DB_PORT=${DB_PORT}" >>.env
    echo "export PHP_VERSION=${PHP_VERSION}" >>.env
    source .env
}

function docker_setup() {
    if [ ! -d "../src" ]; then
        mkdir ../src
    fi

    CLEAN_PROJECT=true

    [ "$(ls -A ../src)" ] && CLEAN_PROJECT=false
    docker-compose -p ${APP_NAME} up -d --build
    [ ! "$(docker ps -a | grep ${APP_NAME}-app)" ] && echo "Build project failed" && end_script
}

function framework_setup() {
    if $CLEAN_PROJECT; then
        docker exec -it ${APP_NAME}-app composer create-project laravel/laravel project

        if [ ! "$(ls -A ../src/project)" ]; then
            echo "Failure to create project"
            end_script
        fi

        cp -r ../src/project/. ../src/
        rm -Rf ../src/project

        sed -i '' "s/APP_NAME=.*/APP_NAME=${APP_NAME}/" ../src/.env.example
        sed -i '' "s/APP_URL=.*/APP_URL=http:\/\/localhost:${APP_PORT}/" ../src/.env.example
        sed -i '' "s/DB_HOST=.*/DB_HOST=${APP_NAME}-db/" ../src/.env.example
        sed -i '' "s/DB_PORT=.*/DB_PORT=3306/" ../src/.env.example
        sed -i '' "s/DB_DATABASE=.*/DB_DATABASE=${APP_NAME}/" ../src/.env.example
        sed -i '' "s/DB_USERNAME=.*/DB_USERNAME=root/" ../src/.env.example
        sed -i '' "s/DB_PASSWORD=.*/DB_PASSWORD=root/" ../src/.env.example

        cp ../src/.env.example ../src/.env
        cp ../.gitignore ../src/.gitignore
        cp ../config/models.php ../src/config/models.php
        cp ../config/code-quality/* ../src/
        cp ../config/template-readme.md ../README.md

        # Replace container name in README.md
        sed -i '' "s/CONTAINER_APP_NAME/${APP_NAME}-app/" ../README.md

        rm -Rf ../config/
    else
        cp ../src/.env.example ../src/.env
        sed -i '' "s/APP_NAME=.*/APP_NAME=${APP_NAME}/" ../src/.env
        sed -i '' "s/APP_URL=.*/APP_URL=http:\/\/localhost:${APP_PORT}/" ../src/.env
        sed -i '' "s/DB_HOST=.*/DB_HOST=${APP_NAME}-db/" ../src/.env
        sed -i '' "s/DB_PORT=.*/DB_PORT=3306/" ../src/.env
        sed -i '' "s/DB_DATABASE=.*/DB_DATABASE=${APP_NAME}/" ../src/.env
        sed -i '' "s/DB_USERNAME=.*/DB_USERNAME=root/" ../src/.env
        sed -i '' "s/DB_PASSWORD=.*/DB_PASSWORD=root/" ../src/.env
    fi
}

function package_installation() {
    if $CLEAN_PROJECT; then
        docker exec -it ${APP_NAME}-app composer require \
            your-app-rocks/eloquent-uuid \
            tucker-eric/eloquentfilter

        docker exec -it ${APP_NAME}-app composer config --no-plugins allow-plugins.phpro/grumphp true
        docker exec -it ${APP_NAME}-app composer config --no-plugins allow-plugins.dealerdirect/phpcodesniffer-composer-installer true

        docker exec -it ${APP_NAME}-app composer require --dev \
            reliese/laravel \
            phpstan/phpstan \
            phpro/grumphp \
            slevomat/coding-standard \
            squizlabs/php_codesniffer \
            nunomaduro/larastan
    else
        docker exec -it ${APP_NAME}-app composer install
    fi

    docker exec -it ${APP_NAME}-app vendor/bin/grumphp git:deinit
}

function database_setup() {
    docker exec -it ${APP_NAME}-app php artisan key:generate --ansi
    docker exec -it ${APP_NAME}-app php artisan migrate --force
    docker exec -it ${APP_NAME}-app php artisan db:seed --force
}

function project_initialization() {
    framework_setup
    package_installation
    database_setup
}

function check_docker() {
    # Check if Docker command exists
    if ! command -v docker &>/dev/null; then
        echo "Docker is not installed. Please install Docker before running this script."

        end_script
    fi

    # Check if Docker daemon is running
    if ! docker info &>/dev/null; then
        echo "Docker is not running. Please start Docker before running this script."

        end_script
    fi
}

## Main Execution

display_header

check_docker
environment_setup
set_defaults
parse_arguments "$@"
test_ports
create_env_file
docker_setup
project_initialization
